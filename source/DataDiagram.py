# -*- coding: utf-8 -*-
"""DataDiagram.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VVNyNd9KfhKgTO2v8opSxmJ4nYYvQiiR
"""

import numpy as np
import math

vector = np.random.rand(1,65536)[0] 
vector = vector * (0.5 + 0.5j)
vector = vector / np.linalg.norm(vector)

print(vector)

class DataDiagram:
     def __init__(self,data):
          self.data = data
          self.parent = None
          self.left = None
          self.right = None
          self.amplitude = 0
          self.length = 0
          self.fft = False
     def __repr__(self):
          return repr(self.data)
     def change_fft(self):
        self.fft = not(self.fft)
     def add_left(self,node):
         self.left = node
         if node is not None:
             node.parent = self
     def add_right(self,node):
         self.right = node
         if node is not None:
             node.parent = self
     def set_length(self, length):
         self.length = length
     def get_left(self):
        return self.left
     def get_right(self):
        return self.right
     def get_parent(self):
        return self.parent
     def get_data(self):
        return self.data
     def set_data(self, data):
        self.data = data
     def get_amplitude(self):
       return self.amplitude
     def get_length(self):
       return self.length
     def set_amplitude(self, amp):
       self.amplitude = amp

def getProbability(value):
  return np.conjugate(value)*value
def constructData(root, vector, history):
  partialNorm = np.dot(np.transpose(vector.conjugate()), vector)
  if(root.get_data() != "DD"):
    root.set_data(history)
  if(len(vector) == 1):
    root.set_data(history)
    root.set_amplitude(vector[0])
    return (getProbability(vector[0]) > 0)
  leftNode = DataDiagram(history)
  rightNode = DataDiagram(history)
  middle_index = len(vector)//2
  if(constructData(leftNode, vector[:middle_index], history + str(0))):
    root.add_left(leftNode)
  if(constructData(rightNode, vector[middle_index:], history + str(1))):
     root.add_right(rightNode)
  if(root.get_left() == None and root.get_right() != None and root.get_right().get_amplitude() != 0+0j and root.get_data() != "DD"):
    root.set_amplitude(rightNode.get_amplitude())
    root.set_data(str(rightNode.get_data()))
    root.add_right(None)
  else:
      if(root.get_left() != None and root.get_left().get_amplitude() != 0+0j and root.get_right() == None and root.get_data() != "DD"):
        root.set_amplitude(leftNode.get_amplitude())
        root.set_data(str(leftNode.get_data()))
        root.add_left(None)
      else:
        root.set_amplitude(partialNorm)
  return (partialNorm*partialNorm > 0)

root = DataDiagram("DD")
root.set_length(constructData(root, vector, ""))

print(root)

def printTree(root, level=0):
    print("  " * (2*level), root, "| Amplitude: ", root.get_amplitude())
    if(root.get_left() != None):
        printTree(root.get_left(), level + 1)
    if(root.get_right() != None):
        printTree(root.get_right(), level + 1)

def correctBinaryStrings(root, level=0):
    if(len(root.get_data()) < int(math.log2(len(vector))) and root.get_data() != "DD"):
      root.set_data(root.get_data() + ("0" * (int(math.log2(len(vector))) - len(root.get_data()))))
    if(root.get_left() != None):
        correctBinaryStrings(root.get_left(), level + 1)
    if(root.get_right() != None):
        correctBinaryStrings(root.get_right(), level + 1)
def countEntries(root, level=0):
    if(root is None):
      return 1
    return countEntries(root.get_left(), level + 1) + countEntries(root.get_right(), level + 1)
correctBinaryStrings(root)

printTree(root, 0)

print(vector)
print(math.log2(len(vector)))

prior = countEntries(root, 0)
priorVector = len(vector)
if(sum([int(vector[i]*np.conj(vector[i]) > 0) for i in range(len(vector))])/len(vector) > 0.05):
  print("Changing")
  vector = np.fft.fft(vector)
  vector = vector/np.linalg.norm(vector)
  root = DataDiagram("DD")
  constructData(root, vector, "")
  root.change_fft()
  now = countEntries(root, 0)
  print("Prior: ", prior, " Now: ", now)
  print("Vector Size Prior: ", priorVector, " | New Size: ", len(vector))
print(root.fft)

print(vector)

