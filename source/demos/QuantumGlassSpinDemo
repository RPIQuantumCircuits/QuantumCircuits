import sys
import dimod
import neal
import networkx as nx
import dwave.inspector
import matplotlib.pyplot as plt
from dwave.system import DWaveSampler, EmbeddingComposite
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLineEdit, QPushButton, QHBoxLayout, QLabel
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

import os
import tkinter as tk
from tkinter import simpledialog

def get_api_key():
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    api_key = simpledialog.askstring("API Key Request", "Please enter your API key:")
    return api_key
    
os.environ["DWAVE_API_TOKEN"] = get_api_key()

def sample_and_plot(qubo_matrix, graph_window):
    # Convert QUBO matrix to a dimod BQM (Binary Quadratic Model)
    linear = {v: qubo_matrix[v][v] for v in range(len(qubo_matrix))}
    quadratic = {(i, j): qubo_matrix[i][j] for i in range(len(qubo_matrix)) for j in range(i+1, len(qubo_matrix))}
    bqm = dimod.BinaryQuadraticModel(linear, quadratic, 0, dimod.BINARY)
    
    # Use the DWaveCliqueSampler to generate a problem compatible with D-Wave devices
    # but solve it classically using QBSolv
    client = dwave.cloud.Client.from_config()
    solver = client.get_solver(qpu=True)

    sampler = EmbeddingComposite(DWaveSampler(token="DEV-648f4916bfa0706429cbdd64b5e08c4847f505bd"))
    sampleset = sampler.sample(bqm, num_reads=256, chain_strength=1, label='bqm/sampleset inspector example')

    energies = [sample.energy for sample in sampleset.data()]
    fig, ax = plt.subplots()

    dwave.inspector.show(bqm, sampleset)

    # Take the lowest energy sample as our representative solution
    sample = sampleset.first.sample
    fig, ax = plt.subplots()    # Create a NetworkX graph colored based on the solution
    
    G = nx.Graph()
    for i, value in sample.items():
        color = 'red' if value else 'blue'
        G.add_node(i, color=color)

    for i in range(len(qubo_matrix)):
        for j in range(len(qubo_matrix)):
            if qubo_matrix[i][j]:
                G.add_edge(i, j)

    # Draw the graph
    colors = [data['color'] for _, data in G.nodes(data=True)]

    nx.draw(G, with_labels=True, node_color=colors, ax=ax)
    plt.show()
    plt.figure(graph_window.number)

class GraphWindow(QWidget):
    def __init__(self):
        super().__init__()
        
        self.matrix = None
        self.edges = []

        # Adjust the figsize to a reasonable default, then let the GUI adapt to the content
        self.fig, self.ax = plt.subplots(figsize=(9, 6))
        self.ax.axis('on')
        self.ax.set_aspect('equal', 'box')
        self.canvas = FigureCanvas(self.fig)
        self.canvas.mpl_connect('button_press_event', self.on_click)

        self.nodes = []
        self.selected_node = None
        
        layout = QVBoxLayout()

        canvas_box = QHBoxLayout()
        canvas_box.addWidget(self.canvas)
        
        layout.addLayout(canvas_box)

        input_box = QHBoxLayout()
        self.neighbor_strength_input = QLineEdit(self)
        self.neighbor_strength_input.setFixedWidth(200)
        self.field_strength_input = QLineEdit(self)
        self.field_strength_input.setFixedWidth(200)
        
        input_box.addStretch(1)
        input_box.addWidget(QLabel("Neighbor Connection Strength:"))
        input_box.addWidget(self.neighbor_strength_input)
        input_box.addWidget(QLabel("Field Strength:"))
        input_box.addWidget(self.field_strength_input)
        input_box.addStretch(1)
        
        layout.addLayout(input_box)

        button_box = QHBoxLayout()
        self.simulate_btn = QPushButton("Simulate", self)
        button_box.addStretch(1)
        button_box.addWidget(self.simulate_btn)
        button_box.addStretch(1)
        self.simulate_btn.clicked.connect(self.ising_simulation)

        layout.addLayout(button_box)

        self.setLayout(layout)

    def ising_to_qubo(self, adj_matrix, J, h):
        n = len(adj_matrix)
        qubo_matrix = [[0 for _ in range(n)] for _ in range(n)]
    
        for i in range(n):
            for j in range(n):
                if i == j:
                    qubo_matrix[i][j] = h
                else:
                    qubo_matrix[i][j] = J * adj_matrix[i][j]

        return qubo_matrix

    def ising_simulation(self, event):
        matrix = self.to_adjacency_matrix()
        if(1==1):
            qubo_matrix = self.ising_to_qubo(matrix, float(self.neighbor_strength_input.text()), float(self.field_strength_input.text()))
            sample_and_plot(qubo_matrix, self.fig)
        else:
            print("Error: Failure to create Ising QUBO matrix...")

    def to_adjacency_matrix(self):
        n = len(self.nodes)
        matrix = [[0 for _ in range(n)] for _ in range(n)]

        for i, j, distance in self.edges:
            matrix[i][j] = distance

        return matrix

    def on_click(self, event):
        self.matrix = None
        x, y = event.xdata, event.ydata
        if x is None or y is None:
            return

        clicked_node = None
        for idx, (nx, ny) in enumerate(self.nodes):
            if (x - nx)**2 + (y - ny)**2 < 0.05**2:
                clicked_node = idx
                break


        if clicked_node is not None:
            if self.selected_node is not None and self.selected_node != clicked_node:
                self.ax.plot([self.nodes[self.selected_node][0], self.nodes[clicked_node][0]],[self.nodes[self.selected_node][1], self.nodes[clicked_node][1]], color='black')
                distance = ((self.nodes[self.selected_node][0] - self.nodes[clicked_node][0])**2 + (self.nodes[self.selected_node][1] - self.nodes[clicked_node][1])**2)**0.5
                self.edges.append((self.selected_node, clicked_node, distance))
                self.edges.append((clicked_node, self.selected_node, distance))
                self.selected_node = None
            else:
                self.selected_node = clicked_node
        else:
            self.nodes.append((x, y))
            self.ax.add_patch(plt.Circle((x, y), radius=0.05, color='blue', transform=self.ax.transData))

        self.canvas.draw()

app = QApplication(sys.argv)
window = GraphWindow()
window.setWindowTitle("QUBO Demo GUI")
window.resize(window.sizeHint())  # Adjust the size of the window to fit its content
window.show()
sys.exit(app.exec_())
